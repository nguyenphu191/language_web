const mongoose = require('mongoose');
const Language = require('../models/Language');
const Topic = require('../models/Topic');
const Vocabulary = require('../models/Vocabulary');

const seedTopics = async () => {
  try {
    console.log('üå± B·∫Øt ƒë·∫ßu t·∫°o Topics v√† c·∫≠p nh·∫≠t Vocabulary...');
    
    // K·∫øt n·ªëi database
    await mongoose.connect('mongodb://localhost:27017/language-learning');
    console.log('‚úÖ ƒê√£ k·∫øt n·ªëi MongoDB');
    
    // L·∫•y ng√¥n ng·ªØ
    const english = await Language.findOne({ code: 'EN' });
    const japanese = await Language.findOne({ code: 'JA' });
    
    if (!english || !japanese) {
      console.log('‚ùå Vui l√≤ng ch·∫°y seedData.js tr∆∞·ªõc ƒë·ªÉ t·∫°o Languages');
      process.exit(1);
    }
    
    // X√≥a topics c≈©
    await Topic.deleteMany({});
    console.log('üóëÔ∏è ƒê√£ x√≥a Topics c≈©');
    
    // T·∫°o Topics cho ti·∫øng Anh
    const englishTopics = [
      {
        name: 'Greetings & Basic Phrases',
        description: 'C√°c c·ª•m t·ª´ ch√†o h·ªèi v√† giao ti·∫øp c∆° b·∫£n',
        language: english._id,
        level: 'beginner',
        icon: 'üëã',
        color: 'green',
        order: 1
      },
      {
        name: 'Food & Drinks',
        description: 'T·ª´ v·ª±ng v·ªÅ ƒë·ªì ƒÉn v√† th·ª©c u·ªëng',
        language: english._id,
        level: 'beginner',
        icon: 'üçï',
        color: 'orange',
        order: 2
      },
      {
        name: 'Family & Relationships',
        description: 'Gia ƒë√¨nh v√† c√°c m·ªëi quan h·ªá',
        language: english._id,
        level: 'beginner',
        icon: 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶',
        color: 'pink',
        order: 3
      },
      {
        name: 'Numbers & Time',
        description: 'S·ªë ƒë·∫øm v√† th·ªùi gian',
        language: english._id,
        level: 'beginner',
        icon: 'üïê',
        color: 'blue',
        order: 4
      },
      {
        name: 'Colors & Shapes',
        description: 'M√†u s·∫Øc v√† h√¨nh d·∫°ng',
        language: english._id,
        level: 'beginner',
        icon: 'üåà',
        color: 'purple',
        order: 5
      },
      {
        name: 'Transportation',
        description: 'Ph∆∞∆°ng ti·ªán giao th√¥ng',
        language: english._id,
        level: 'intermediate',
        icon: 'üöó',
        color: 'indigo',
        order: 6
      },
      {
        name: 'Business & Work',
        description: 'Kinh doanh v√† c√¥ng vi·ªác',
        language: english._id,
        level: 'intermediate',
        icon: 'üíº',
        color: 'gray',
        order: 7
      },
      {
        name: 'Technology',
        description: 'C√¥ng ngh·ªá v√† m√°y t√≠nh',
        language: english._id,
        level: 'advanced',
        icon: 'üíª',
        color: 'blue',
        order: 8
      }
    ];
    
    // T·∫°o Topics cho ti·∫øng Nh·∫≠t
    const japaneseTopics = [
      {
        name: 'Hiragana Basics',
        description: 'H·ªçc Hiragana c∆° b·∫£n',
        language: japanese._id,
        level: 'beginner',
        icon: '„ÅÇ',
        color: 'red',
        order: 1
      },
      {
        name: 'Greetings („ÅÇ„ÅÑ„Åï„Å§)',
        description: 'C√°c c√°ch ch√†o h·ªèi trong ti·∫øng Nh·∫≠t',
        language: japanese._id,
        level: 'beginner',
        icon: 'üôá',
        color: 'green',
        order: 2
      },
      {
        name: 'Food Culture (È£ü„ÅπÁâ©)',
        description: 'VƒÉn h√≥a ·∫©m th·ª±c Nh·∫≠t B·∫£n',
        language: japanese._id,
        level: 'intermediate',
        icon: 'üç£',
        color: 'orange',
        order: 3
      }
    ];
    
    // L∆∞u topics
    const createdEnglishTopics = await Topic.insertMany(englishTopics);
    const createdJapaneseTopics = await Topic.insertMany(japaneseTopics);
    
    console.log(`‚úÖ ƒê√£ t·∫°o ${createdEnglishTopics.length} topics ti·∫øng Anh`);
    console.log(`‚úÖ ƒê√£ t·∫°o ${createdJapaneseTopics.length} topics ti·∫øng Nh·∫≠t`);
    
    // T·∫°o th√™m t·ª´ v·ª±ng cho c√°c topics
    const greetingsTopic = createdEnglishTopics.find(t => t.name.includes('Greetings'));
    const foodTopic = createdEnglishTopics.find(t => t.name.includes('Food'));
    const japaneseGreetingsTopic = createdJapaneseTopics.find(t => t.name.includes('Greetings'));
    
    // T·ª´ v·ª±ng cho Greetings
    const greetingsVocab = [
      {
        word: 'good morning',
        pronunciation: '…° äd Ààm…îrn…™≈ã',
        meaning: 'A greeting used in the morning',
        translation: 'ch√†o bu·ªïi s√°ng',
        partOfSpeech: 'interjection',
        example: {
          sentence: 'Good morning! How did you sleep?',
          translation: 'Ch√†o bu·ªïi s√°ng! B·∫°n ng·ªß th·∫ø n√†o?'
        },
        language: english._id,
        topic: greetingsTopic._id,
        level: 'beginner',
        frequency: 9
      },
      {
        word: 'good night',
        pronunciation: '…° äd na…™t',
        meaning: 'A farewell greeting used in the evening',
        translation: 'ch√∫c ng·ªß ngon',
        partOfSpeech: 'interjection',
        example: {
          sentence: 'Good night, sweet dreams!',
          translation: 'Ch√∫c ng·ªß ngon, n·∫±m m∆° ƒë·∫πp!'
        },
        language: english._id,
        topic: greetingsTopic._id,
        level: 'beginner',
        frequency: 9
      },
      {
        word: 'how are you',
        pronunciation: 'ha ä …ër ju',
        meaning: 'A common greeting asking about someone\'s wellbeing',
        translation: 'b·∫°n c√≥ kh·ªèe kh√¥ng',
        partOfSpeech: 'interjection',
        example: {
          sentence: 'Hi John! How are you today?',
          translation: 'Ch√†o John! H√¥m nay b·∫°n th·∫ø n√†o?'
        },
        language: english._id,
        topic: greetingsTopic._id,
        level: 'beginner',
        frequency: 10
      },
      {
        word: 'nice to meet you',
        pronunciation: 'na…™s tu mit ju',
        meaning: 'An expression used when meeting someone for the first time',
        translation: 'r·∫•t vui ƒë∆∞·ª£c g·∫∑p b·∫°n',
        partOfSpeech: 'interjection',
        example: {
          sentence: 'Hello, I\'m Sarah. Nice to meet you!',
          translation: 'Xin ch√†o, t√¥i l√† Sarah. R·∫•t vui ƒë∆∞·ª£c g·∫∑p b·∫°n!'
        },
        language: english._id,
        topic: greetingsTopic._id,
        level: 'beginner',
        frequency: 8
      }
    ];
    
    // T·ª´ v·ª±ng cho Food
    const foodVocab = [
      {
        word: 'apple',
        pronunciation: 'Àà√¶p…ôl',
        meaning: 'A round fruit with red or green skin',
        translation: 't√°o',
        partOfSpeech: 'noun',
        example: {
          sentence: 'I eat an apple every day.',
          translation: 'T√¥i ƒÉn m·ªôt qu·∫£ t√°o m·ªói ng√†y.'
        },
        language: english._id,
        topic: foodTopic._id,
        level: 'beginner',
        frequency: 7
      },
      {
        word: 'bread',
        pronunciation: 'bred',
        meaning: 'A food made from flour, water and yeast',
        translation: 'b√°nh m√¨',
        partOfSpeech: 'noun',
        example: {
          sentence: 'I love fresh bread with butter.',
          translation: 'T√¥i th√≠ch b√°nh m√¨ t∆∞∆°i v·ªõi b∆°.'
        },
        language: english._id,
        topic: foodTopic._id,
        level: 'beginner',
        frequency: 7
      },
      {
        word: 'coffee',
        pronunciation: 'Ààk…îfi',
        meaning: 'A hot drink made from coffee beans',
        translation: 'c√† ph√™',
        partOfSpeech: 'noun',
        example: {
          sentence: 'I need my morning coffee.',
          translation: 'T√¥i c·∫ßn c√† ph√™ bu·ªïi s√°ng.'
        },
        language: english._id,
        topic: foodTopic._id,
        level: 'beginner',
        frequency: 8
      }
    ];
    
    // T·ª´ v·ª±ng ti·∫øng Nh·∫≠t
    const japaneseVocab = [
      {
        word: '„Åä„ÅØ„Çà„ÅÜ',
        pronunciation: 'ohayou',
        meaning: 'Good morning (casual)',
        translation: 'ch√†o bu·ªïi s√°ng (th√¢n m·∫≠t)',
        partOfSpeech: 'interjection',
        example: {
          sentence: '„Åä„ÅØ„Çà„ÅÜÔºÅ‰ªäÊó•„ÅØ„ÅÑ„ÅÑÂ§©Ê∞ó„Åß„Åô„Å≠„ÄÇ',
          translation: 'Ch√†o bu·ªïi s√°ng! H√¥m nay th·ªùi ti·∫øt ƒë·∫πp nh·ªâ.'
        },
        language: japanese._id,
        topic: japaneseGreetingsTopic._id,
        level: 'beginner',
        frequency: 10
      },
      {
        word: '„Åä„ÅØ„Çà„ÅÜ„Åî„Åñ„ÅÑ„Åæ„Åô',
        pronunciation: 'ohayou gozaimasu',
        meaning: 'Good morning (polite)',
        translation: 'ch√†o bu·ªïi s√°ng (l·ªãch s·ª±)',
        partOfSpeech: 'interjection',
        example: {
          sentence: '„Åä„ÅØ„Çà„ÅÜ„Åî„Åñ„ÅÑ„Åæ„Åô„ÄÅÁî∞‰∏≠„Åï„Çì„ÄÇ',
          translation: 'Ch√†o bu·ªïi s√°ng, anh/ch·ªã Tanaka.'
        },
        language: japanese._id,
        topic: japaneseGreetingsTopic._id,
        level: 'beginner',
        frequency: 10
      }
    ];
    
    // L∆∞u t·ª´ v·ª±ng m·ªõi
    await Vocabulary.insertMany([...greetingsVocab, ...foodVocab, ...japaneseVocab]);
    console.log(`‚úÖ ƒê√£ t·∫°o ${greetingsVocab.length + foodVocab.length + japaneseVocab.length} t·ª´ v·ª±ng m·ªõi`);
    
    // C·∫≠p nh·∫≠t t·ª´ v·ª±ng c≈© v·ªõi topic
    const existingEnglishWords = await Vocabulary.find({ 
      language: english._id, 
      topic: { $exists: false } 
    });
    
    for (const word of existingEnglishWords) {
      if (['hello', 'goodbye', 'thank you'].includes(word.word.toLowerCase())) {
        word.topic = greetingsTopic._id;
      } else if (['water', 'food'].includes(word.word.toLowerCase())) {
        word.topic = foodTopic._id;
      }
      await word.save();
    }
    
    // C·∫≠p nh·∫≠t t·ª´ v·ª±ng ti·∫øng Nh·∫≠t c≈©
    const existingJapaneseWords = await Vocabulary.find({ 
      language: japanese._id, 
      topic: { $exists: false } 
    });
    
    for (const word of existingJapaneseWords) {
      word.topic = japaneseGreetingsTopic._id;
      await word.save();
    }
    
    console.log('‚úÖ ƒê√£ c·∫≠p nh·∫≠t topic cho t·ª´ v·ª±ng c≈©');
    
    // C·∫≠p nh·∫≠t vocabularyCount cho c√°c topics
    for (const topic of [...createdEnglishTopics, ...createdJapaneseTopics]) {
      await topic.updateVocabularyCount();
    }
    
    console.log('‚úÖ ƒê√£ c·∫≠p nh·∫≠t vocabularyCount cho topics');
    
    console.log('üéâ Ho√†n th√†nh t·∫°o Topics v√† c·∫≠p nh·∫≠t Vocabulary!');
    process.exit(0);
    
  } catch (error) {
    console.error('‚ùå L·ªói t·∫°o topics:', error);
    process.exit(1);
  }
};

// Ch·∫°y h√†m t·∫°o d·ªØ li·ªáu
seedTopics();