const mongoose = require('mongoose');

const topicSchema = new mongoose.Schema({
  name: {
    type: String,
    required: [true, 'T√™n ch·ªß ƒë·ªÅ l√† b·∫Øt bu·ªôc'],
    trim: true
  },
  
  description: {
    type: String,
    trim: true
  },
  
  language: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Language',
    required: [true, 'Ng√¥n ng·ªØ l√† b·∫Øt bu·ªôc']
  },
  
  level: {
    type: String,
    enum: ['beginner', 'intermediate', 'advanced'],
    default: 'beginner'
  },
  
  icon: {
    type: String,
    default: 'üìö' // Emoji icon
  },
  
  color: {
    type: String,
    default: 'blue' // M√†u theme
  },
  
  isActive: {
    type: Boolean,
    default: true
  },
  
  order: {
    type: Number,
    default: 0 // Th·ª© t·ª± hi·ªÉn th·ªã
  },
  
  // Th·ªëng k√™
  vocabularyCount: {
    type: Number,
    default: 0
  }
}, {
  timestamps: true
});

// Index ƒë·ªÉ t√¨m ki·∫øm nhanh
topicSchema.index({ language: 1, level: 1, isActive: 1 });
topicSchema.index({ language: 1, order: 1 });

// Middleware ƒë·ªÉ t·ª± ƒë·ªông c·∫≠p nh·∫≠t vocabularyCount
topicSchema.methods.updateVocabularyCount = async function() {
  const Vocabulary = mongoose.model('Vocabulary');
  this.vocabularyCount = await Vocabulary.countDocuments({ topic: this._id });
  await this.save();
};

module.exports = mongoose.model('Topic', topicSchema);